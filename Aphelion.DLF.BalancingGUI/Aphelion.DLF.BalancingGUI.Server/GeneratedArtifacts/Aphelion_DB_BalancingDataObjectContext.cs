//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Queries_DataSourceId", "DataSources", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.DataSource), "Queries", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Query), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_DataSourceTypeId", "DataSourceTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.DataSourceType), "DataSources", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.DataSource), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_FunctionalAreaID", "FunctionalAreas", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.FunctionalArea), "Tests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Test), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Results_QueryID", "Queries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Query), "Results", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Result), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Results_Run", "Run", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Run), "Results", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Result), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Queries_TestId", "Tests", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Test), "Queries", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Query), true)]

#endregion

namespace LightSwitchApplication.Implementation
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Aphelion_DB_BalancingData : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Aphelion_DB_BalancingData object using the connection string found in the 'Aphelion_DB_BalancingData' section of the application configuration file.
        /// </summary>
        public Aphelion_DB_BalancingData() : base("name=Aphelion_DB_BalancingData", "Aphelion_DB_BalancingData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Aphelion_DB_BalancingData object.
        /// </summary>
        public Aphelion_DB_BalancingData(string connectionString) : base(connectionString, "Aphelion_DB_BalancingData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Aphelion_DB_BalancingData object.
        /// </summary>
        public Aphelion_DB_BalancingData(EntityConnection connection) : base(connection, "Aphelion_DB_BalancingData")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DataSource> DataSources
        {
            get
            {
                if ((_DataSources == null))
                {
                    _DataSources = base.CreateObjectSet<DataSource>("DataSources");
                }
                return _DataSources;
            }
        }
        private ObjectSet<DataSource> _DataSources;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DataSourceType> DataSourceTypes
        {
            get
            {
                if ((_DataSourceTypes == null))
                {
                    _DataSourceTypes = base.CreateObjectSet<DataSourceType>("DataSourceTypes");
                }
                return _DataSourceTypes;
            }
        }
        private ObjectSet<DataSourceType> _DataSourceTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FunctionalArea> FunctionalAreas
        {
            get
            {
                if ((_FunctionalAreas == null))
                {
                    _FunctionalAreas = base.CreateObjectSet<FunctionalArea>("FunctionalAreas");
                }
                return _FunctionalAreas;
            }
        }
        private ObjectSet<FunctionalArea> _FunctionalAreas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Query> Queries
        {
            get
            {
                if ((_Queries == null))
                {
                    _Queries = base.CreateObjectSet<Query>("Queries");
                }
                return _Queries;
            }
        }
        private ObjectSet<Query> _Queries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Result> Results
        {
            get
            {
                if ((_Results == null))
                {
                    _Results = base.CreateObjectSet<Result>("Results");
                }
                return _Results;
            }
        }
        private ObjectSet<Result> _Results;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Run> Runs
        {
            get
            {
                if ((_Runs == null))
                {
                    _Runs = base.CreateObjectSet<Run>("Runs");
                }
                return _Runs;
            }
        }
        private ObjectSet<Run> _Runs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Test> Tests
        {
            get
            {
                if ((_Tests == null))
                {
                    _Tests = base.CreateObjectSet<Test>("Tests");
                }
                return _Tests;
            }
        }
        private ObjectSet<Test> _Tests;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DataSources EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDataSources(DataSource dataSource)
        {
            base.AddObject("DataSources", dataSource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DataSourceTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDataSourceTypes(DataSourceType dataSourceType)
        {
            base.AddObject("DataSourceTypes", dataSourceType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FunctionalAreas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFunctionalAreas(FunctionalArea functionalArea)
        {
            base.AddObject("FunctionalAreas", functionalArea);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Queries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToQueries(Query query)
        {
            base.AddObject("Queries", query);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Results EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResults(Result result)
        {
            base.AddObject("Results", result);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Runs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRuns(Run run)
        {
            base.AddObject("Runs", run);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTests(Test test)
        {
            base.AddObject("Tests", test);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="DataSource")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DataSource : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DataSource object.
        /// </summary>
        /// <param name="dataSourceID">Initial value of the DataSourceID property.</param>
        /// <param name="dataSourceName">Initial value of the DataSourceName property.</param>
        /// <param name="dataSourceTypeID">Initial value of the DataSourceTypeID property.</param>
        public static DataSource CreateDataSource(global::System.Int32 dataSourceID, global::System.String dataSourceName, global::System.Int32 dataSourceTypeID)
        {
            DataSource dataSource = new DataSource();
            dataSource.DataSourceID = dataSourceID;
            dataSource.DataSourceName = dataSourceName;
            dataSource.DataSourceTypeID = dataSourceTypeID;
            return dataSource;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataSourceID
        {
            get
            {
                return _DataSourceID;
            }
            set
            {
                if (_DataSourceID != value)
                {
                    OnDataSourceIDChanging(value);
                    ReportPropertyChanging("DataSourceID");
                    _DataSourceID = value;
                    ReportPropertyChanged("DataSourceID");
                    OnDataSourceIDChanged();
                }
            }
        }
        private global::System.Int32 _DataSourceID;
        partial void OnDataSourceIDChanging(global::System.Int32 value);
        partial void OnDataSourceIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DataSourceName
        {
            get
            {
                return _DataSourceName;
            }
            set
            {
                OnDataSourceNameChanging(value);
                ReportPropertyChanging("DataSourceName");
                _DataSourceName = value;
                ReportPropertyChanged("DataSourceName");
                OnDataSourceNameChanged();
            }
        }
        private global::System.String _DataSourceName;
        partial void OnDataSourceNameChanging(global::System.String value);
        partial void OnDataSourceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ConnectionString
        {
            get
            {
                return _ConnectionString;
            }
            set
            {
                OnConnectionStringChanging(value);
                ReportPropertyChanging("ConnectionString");
                _ConnectionString = value;
                ReportPropertyChanged("ConnectionString");
                OnConnectionStringChanged();
            }
        }
        private global::System.String _ConnectionString;
        partial void OnConnectionStringChanging(global::System.String value);
        partial void OnConnectionStringChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataSourceTypeID
        {
            get
            {
                return _DataSourceTypeID;
            }
            set
            {
                OnDataSourceTypeIDChanging(value);
                ReportPropertyChanging("DataSourceTypeID");
                _DataSourceTypeID = value;
                ReportPropertyChanged("DataSourceTypeID");
                OnDataSourceTypeIDChanged();
            }
        }
        private global::System.Int32 _DataSourceTypeID;
        partial void OnDataSourceTypeIDChanging(global::System.Int32 value);
        partial void OnDataSourceTypeIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_DataSourceTypeId", "DataSourceTypes")]
        public DataSourceType DataSourceType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DataSourceType>("LightSwitchApplication.FK_DataSourceTypeId", "DataSourceTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DataSourceType>("LightSwitchApplication.FK_DataSourceTypeId", "DataSourceTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DataSourceType> DataSourceTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DataSourceType>("LightSwitchApplication.FK_DataSourceTypeId", "DataSourceTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DataSourceType>("LightSwitchApplication.FK_DataSourceTypeId", "DataSourceTypes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Queries_DataSourceId", "Queries")]
        public EntityCollection<Query> Queries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Query>("LightSwitchApplication.FK_Queries_DataSourceId", "Queries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Query>("LightSwitchApplication.FK_Queries_DataSourceId", "Queries", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="DataSourceType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DataSourceType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DataSourceType object.
        /// </summary>
        /// <param name="dataSourceTypeID">Initial value of the DataSourceTypeID property.</param>
        /// <param name="dataSourceTypeName">Initial value of the DataSourceTypeName property.</param>
        public static DataSourceType CreateDataSourceType(global::System.Int32 dataSourceTypeID, global::System.String dataSourceTypeName)
        {
            DataSourceType dataSourceType = new DataSourceType();
            dataSourceType.DataSourceTypeID = dataSourceTypeID;
            dataSourceType.DataSourceTypeName = dataSourceTypeName;
            return dataSourceType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataSourceTypeID
        {
            get
            {
                return _DataSourceTypeID;
            }
            set
            {
                if (_DataSourceTypeID != value)
                {
                    OnDataSourceTypeIDChanging(value);
                    ReportPropertyChanging("DataSourceTypeID");
                    _DataSourceTypeID = value;
                    ReportPropertyChanged("DataSourceTypeID");
                    OnDataSourceTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _DataSourceTypeID;
        partial void OnDataSourceTypeIDChanging(global::System.Int32 value);
        partial void OnDataSourceTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DataSourceTypeName
        {
            get
            {
                return _DataSourceTypeName;
            }
            set
            {
                OnDataSourceTypeNameChanging(value);
                ReportPropertyChanging("DataSourceTypeName");
                _DataSourceTypeName = value;
                ReportPropertyChanged("DataSourceTypeName");
                OnDataSourceTypeNameChanged();
            }
        }
        private global::System.String _DataSourceTypeName;
        partial void OnDataSourceTypeNameChanging(global::System.String value);
        partial void OnDataSourceTypeNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_DataSourceTypeId", "DataSources")]
        public EntityCollection<DataSource> DataSources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DataSource>("LightSwitchApplication.FK_DataSourceTypeId", "DataSources");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DataSource>("LightSwitchApplication.FK_DataSourceTypeId", "DataSources", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="FunctionalArea")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FunctionalArea : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FunctionalArea object.
        /// </summary>
        /// <param name="functionalAreaID">Initial value of the FunctionalAreaID property.</param>
        /// <param name="functionalAreaName">Initial value of the FunctionalAreaName property.</param>
        public static FunctionalArea CreateFunctionalArea(global::System.Int32 functionalAreaID, global::System.String functionalAreaName)
        {
            FunctionalArea functionalArea = new FunctionalArea();
            functionalArea.FunctionalAreaID = functionalAreaID;
            functionalArea.FunctionalAreaName = functionalAreaName;
            return functionalArea;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FunctionalAreaID
        {
            get
            {
                return _FunctionalAreaID;
            }
            set
            {
                if (_FunctionalAreaID != value)
                {
                    OnFunctionalAreaIDChanging(value);
                    ReportPropertyChanging("FunctionalAreaID");
                    _FunctionalAreaID = value;
                    ReportPropertyChanged("FunctionalAreaID");
                    OnFunctionalAreaIDChanged();
                }
            }
        }
        private global::System.Int32 _FunctionalAreaID;
        partial void OnFunctionalAreaIDChanging(global::System.Int32 value);
        partial void OnFunctionalAreaIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FunctionalAreaName
        {
            get
            {
                return _FunctionalAreaName;
            }
            set
            {
                OnFunctionalAreaNameChanging(value);
                ReportPropertyChanging("FunctionalAreaName");
                _FunctionalAreaName = value;
                ReportPropertyChanged("FunctionalAreaName");
                OnFunctionalAreaNameChanged();
            }
        }
        private global::System.String _FunctionalAreaName;
        partial void OnFunctionalAreaNameChanging(global::System.String value);
        partial void OnFunctionalAreaNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_FunctionalAreaID", "Tests")]
        public EntityCollection<Test> Tests
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Test>("LightSwitchApplication.FK_FunctionalAreaID", "Tests");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Test>("LightSwitchApplication.FK_FunctionalAreaID", "Tests", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Query")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Query : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Query object.
        /// </summary>
        /// <param name="queryID">Initial value of the QueryID property.</param>
        /// <param name="dataSourceID">Initial value of the DataSourceID property.</param>
        /// <param name="testID">Initial value of the TestID property.</param>
        public static Query CreateQuery(global::System.Int32 queryID, global::System.Int32 dataSourceID, global::System.Int32 testID)
        {
            Query query = new Query();
            query.QueryID = queryID;
            query.DataSourceID = dataSourceID;
            query.TestID = testID;
            return query;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 QueryID
        {
            get
            {
                return _QueryID;
            }
            set
            {
                if (_QueryID != value)
                {
                    OnQueryIDChanging(value);
                    ReportPropertyChanging("QueryID");
                    _QueryID = value;
                    ReportPropertyChanged("QueryID");
                    OnQueryIDChanged();
                }
            }
        }
        private global::System.Int32 _QueryID;
        partial void OnQueryIDChanging(global::System.Int32 value);
        partial void OnQueryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String QueryName
        {
            get
            {
                return _QueryName;
            }
            set
            {
                OnQueryNameChanging(value);
                ReportPropertyChanging("QueryName");
                _QueryName = value;
                ReportPropertyChanged("QueryName");
                OnQueryNameChanged();
            }
        }
        private global::System.String _QueryName;
        partial void OnQueryNameChanging(global::System.String value);
        partial void OnQueryNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String QueryText
        {
            get
            {
                return _QueryText;
            }
            set
            {
                OnQueryTextChanging(value);
                ReportPropertyChanging("QueryText");
                _QueryText = value;
                ReportPropertyChanged("QueryText");
                OnQueryTextChanged();
            }
        }
        private global::System.String _QueryText;
        partial void OnQueryTextChanging(global::System.String value);
        partial void OnQueryTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataSourceID
        {
            get
            {
                return _DataSourceID;
            }
            set
            {
                OnDataSourceIDChanging(value);
                ReportPropertyChanging("DataSourceID");
                _DataSourceID = value;
                ReportPropertyChanged("DataSourceID");
                OnDataSourceIDChanged();
            }
        }
        private global::System.Int32 _DataSourceID;
        partial void OnDataSourceIDChanging(global::System.Int32 value);
        partial void OnDataSourceIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestID
        {
            get
            {
                return _TestID;
            }
            set
            {
                OnTestIDChanging(value);
                ReportPropertyChanging("TestID");
                _TestID = value;
                ReportPropertyChanged("TestID");
                OnTestIDChanged();
            }
        }
        private global::System.Int32 _TestID;
        partial void OnTestIDChanging(global::System.Int32 value);
        partial void OnTestIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Queries_DataSourceId", "DataSources")]
        public DataSource DataSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DataSource>("LightSwitchApplication.FK_Queries_DataSourceId", "DataSources").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DataSource>("LightSwitchApplication.FK_Queries_DataSourceId", "DataSources").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DataSource> DataSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DataSource>("LightSwitchApplication.FK_Queries_DataSourceId", "DataSources");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DataSource>("LightSwitchApplication.FK_Queries_DataSourceId", "DataSources", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Queries_TestId", "Tests")]
        public Test Test
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("LightSwitchApplication.FK_Queries_TestId", "Tests").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("LightSwitchApplication.FK_Queries_TestId", "Tests").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Test> TestReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("LightSwitchApplication.FK_Queries_TestId", "Tests");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Test>("LightSwitchApplication.FK_Queries_TestId", "Tests", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Results_QueryID", "Results")]
        public EntityCollection<Result> Results
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Result>("LightSwitchApplication.FK_Results_QueryID", "Results");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Result>("LightSwitchApplication.FK_Results_QueryID", "Results", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Result")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Result : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Result object.
        /// </summary>
        /// <param name="resultID">Initial value of the ResultID property.</param>
        /// <param name="testDateTime">Initial value of the TestDateTime property.</param>
        /// <param name="queryID">Initial value of the QueryID property.</param>
        /// <param name="runID">Initial value of the RunID property.</param>
        public static Result CreateResult(global::System.Int32 resultID, global::System.DateTime testDateTime, global::System.Int32 queryID, global::System.Int32 runID)
        {
            Result result = new Result();
            result.ResultID = resultID;
            result.TestDateTime = testDateTime;
            result.QueryID = queryID;
            result.RunID = runID;
            return result;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ResultID
        {
            get
            {
                return _ResultID;
            }
            set
            {
                if (_ResultID != value)
                {
                    OnResultIDChanging(value);
                    ReportPropertyChanging("ResultID");
                    _ResultID = value;
                    ReportPropertyChanged("ResultID");
                    OnResultIDChanged();
                }
            }
        }
        private global::System.Int32 _ResultID;
        partial void OnResultIDChanging(global::System.Int32 value);
        partial void OnResultIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> TestResult
        {
            get
            {
                return _TestResult;
            }
            set
            {
                OnTestResultChanging(value);
                ReportPropertyChanging("TestResult");
                _TestResult = value;
                ReportPropertyChanged("TestResult");
                OnTestResultChanged();
            }
        }
        private Nullable<global::System.Double> _TestResult;
        partial void OnTestResultChanging(Nullable<global::System.Double> value);
        partial void OnTestResultChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime TestDateTime
        {
            get
            {
                return _TestDateTime;
            }
            set
            {
                OnTestDateTimeChanging(value);
                ReportPropertyChanging("TestDateTime");
                _TestDateTime = value;
                ReportPropertyChanged("TestDateTime");
                OnTestDateTimeChanged();
            }
        }
        private global::System.DateTime _TestDateTime;
        partial void OnTestDateTimeChanging(global::System.DateTime value);
        partial void OnTestDateTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 QueryID
        {
            get
            {
                return _QueryID;
            }
            set
            {
                OnQueryIDChanging(value);
                ReportPropertyChanging("QueryID");
                _QueryID = value;
                ReportPropertyChanged("QueryID");
                OnQueryIDChanged();
            }
        }
        private global::System.Int32 _QueryID;
        partial void OnQueryIDChanging(global::System.Int32 value);
        partial void OnQueryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RunID
        {
            get
            {
                return _RunID;
            }
            set
            {
                OnRunIDChanging(value);
                ReportPropertyChanging("RunID");
                _RunID = value;
                ReportPropertyChanged("RunID");
                OnRunIDChanged();
            }
        }
        private global::System.Int32 _RunID;
        partial void OnRunIDChanging(global::System.Int32 value);
        partial void OnRunIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Results_QueryID", "Queries")]
        public Query Query
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Query>("LightSwitchApplication.FK_Results_QueryID", "Queries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Query>("LightSwitchApplication.FK_Results_QueryID", "Queries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Query> QueryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Query>("LightSwitchApplication.FK_Results_QueryID", "Queries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Query>("LightSwitchApplication.FK_Results_QueryID", "Queries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Results_Run", "Run")]
        public Run Run
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Run>("LightSwitchApplication.FK_Results_Run", "Run").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Run>("LightSwitchApplication.FK_Results_Run", "Run").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Run> RunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Run>("LightSwitchApplication.FK_Results_Run", "Run");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Run>("LightSwitchApplication.FK_Results_Run", "Run", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Run")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Run : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Run object.
        /// </summary>
        /// <param name="runID">Initial value of the RunID property.</param>
        /// <param name="runTime">Initial value of the RunTime property.</param>
        public static Run CreateRun(global::System.Int32 runID, global::System.DateTime runTime)
        {
            Run run = new Run();
            run.RunID = runID;
            run.RunTime = runTime;
            return run;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RunID
        {
            get
            {
                return _RunID;
            }
            set
            {
                if (_RunID != value)
                {
                    OnRunIDChanging(value);
                    ReportPropertyChanging("RunID");
                    _RunID = value;
                    ReportPropertyChanged("RunID");
                    OnRunIDChanged();
                }
            }
        }
        private global::System.Int32 _RunID;
        partial void OnRunIDChanging(global::System.Int32 value);
        partial void OnRunIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RunName
        {
            get
            {
                return _RunName;
            }
            set
            {
                OnRunNameChanging(value);
                ReportPropertyChanging("RunName");
                _RunName = value;
                ReportPropertyChanged("RunName");
                OnRunNameChanged();
            }
        }
        private global::System.String _RunName;
        partial void OnRunNameChanging(global::System.String value);
        partial void OnRunNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime RunTime
        {
            get
            {
                return _RunTime;
            }
            set
            {
                OnRunTimeChanging(value);
                ReportPropertyChanging("RunTime");
                _RunTime = value;
                ReportPropertyChanged("RunTime");
                OnRunTimeChanged();
            }
        }
        private global::System.DateTime _RunTime;
        partial void OnRunTimeChanging(global::System.DateTime value);
        partial void OnRunTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Results_Run", "Results")]
        public EntityCollection<Result> Results
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Result>("LightSwitchApplication.FK_Results_Run", "Results");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Result>("LightSwitchApplication.FK_Results_Run", "Results", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Test")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Test : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Test object.
        /// </summary>
        /// <param name="testID">Initial value of the TestID property.</param>
        /// <param name="functionalAreaID">Initial value of the FunctionalAreaID property.</param>
        public static Test CreateTest(global::System.Int32 testID, global::System.Int32 functionalAreaID)
        {
            Test test = new Test();
            test.TestID = testID;
            test.FunctionalAreaID = functionalAreaID;
            return test;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestID
        {
            get
            {
                return _TestID;
            }
            set
            {
                if (_TestID != value)
                {
                    OnTestIDChanging(value);
                    ReportPropertyChanging("TestID");
                    _TestID = value;
                    ReportPropertyChanged("TestID");
                    OnTestIDChanged();
                }
            }
        }
        private global::System.Int32 _TestID;
        partial void OnTestIDChanging(global::System.Int32 value);
        partial void OnTestIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TestName
        {
            get
            {
                return _TestName;
            }
            set
            {
                OnTestNameChanging(value);
                ReportPropertyChanging("TestName");
                _TestName = value;
                ReportPropertyChanged("TestName");
                OnTestNameChanged();
            }
        }
        private global::System.String _TestName;
        partial void OnTestNameChanging(global::System.String value);
        partial void OnTestNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> ExpectedResult
        {
            get
            {
                return _ExpectedResult;
            }
            set
            {
                OnExpectedResultChanging(value);
                ReportPropertyChanging("ExpectedResult");
                _ExpectedResult = value;
                ReportPropertyChanged("ExpectedResult");
                OnExpectedResultChanged();
            }
        }
        private Nullable<global::System.Double> _ExpectedResult;
        partial void OnExpectedResultChanging(Nullable<global::System.Double> value);
        partial void OnExpectedResultChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ExpectedResultText
        {
            get
            {
                return _ExpectedResultText;
            }
            set
            {
                OnExpectedResultTextChanging(value);
                ReportPropertyChanging("ExpectedResultText");
                _ExpectedResultText = value;
                ReportPropertyChanged("ExpectedResultText");
                OnExpectedResultTextChanged();
            }
        }
        private global::System.String _ExpectedResultText;
        partial void OnExpectedResultTextChanging(global::System.String value);
        partial void OnExpectedResultTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FunctionalAreaID
        {
            get
            {
                return _FunctionalAreaID;
            }
            set
            {
                OnFunctionalAreaIDChanging(value);
                ReportPropertyChanging("FunctionalAreaID");
                _FunctionalAreaID = value;
                ReportPropertyChanged("FunctionalAreaID");
                OnFunctionalAreaIDChanged();
            }
        }
        private global::System.Int32 _FunctionalAreaID;
        partial void OnFunctionalAreaIDChanging(global::System.Int32 value);
        partial void OnFunctionalAreaIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_FunctionalAreaID", "FunctionalAreas")]
        public FunctionalArea FunctionalArea
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalArea>("LightSwitchApplication.FK_FunctionalAreaID", "FunctionalAreas").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalArea>("LightSwitchApplication.FK_FunctionalAreaID", "FunctionalAreas").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FunctionalArea> FunctionalAreaReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalArea>("LightSwitchApplication.FK_FunctionalAreaID", "FunctionalAreas");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FunctionalArea>("LightSwitchApplication.FK_FunctionalAreaID", "FunctionalAreas", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Queries_TestId", "Queries")]
        public EntityCollection<Query> Queries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Query>("LightSwitchApplication.FK_Queries_TestId", "Queries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Query>("LightSwitchApplication.FK_Queries_TestId", "Queries", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
